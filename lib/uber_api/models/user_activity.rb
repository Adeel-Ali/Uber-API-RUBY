# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 05/09/2016

module UberApi
  class UserActivity

    # Position in pagination.
    # @return [Integer]
    attr_accessor :offset

    # Number of items to retrieve (100 max).
    # @return [Integer]
    attr_accessor :limit

    # Total number of items available.
    # @return [Integer]
    attr_accessor :count

    # Information including the pickup location, dropoff location, request start time, request end time, and distance of requests (in miles), as well as the product type that was requested.
    # @return [List of History]
    attr_accessor :history

    def initialize(offset = nil,
                   limit = nil,
                   count = nil,
                   history = nil)
      @offset = offset
      @limit = limit
      @count = count
      @history = history

    end

    def method_missing(method_name)
      puts "There is no method called '#{method_name}'."
    end

    # Creates JSON of the curent object
    def to_json
      hash = key_map
      hash.to_json
    end

    # Creates an instance of the object from a hash
    def self.from_hash(hash)
      if hash == nil
        nil
      else
        # Extract variables from the hash
        offset = hash["offset"]
        limit = hash["limit"]
        count = hash["count"]
        # Parameter is an array, so we need to iterate through it
        history = nil
        if hash["history"] != nil
          history = Array.new
          hash["history"].each{|structure| history << History.from_hash(structure)}
        end
        # Create object from extracted values
        UserActivity.new(offset,
                         limit,
                         count,
                         history)
      end
    end

    # Defines the key map for json serialization
    def key_map
      hash = {}
      hash['offset'] = offset
      hash['limit'] = limit
      hash['count'] = count
      hash['history'] = history.map(&:key_map)
      hash
    end
  end
end
